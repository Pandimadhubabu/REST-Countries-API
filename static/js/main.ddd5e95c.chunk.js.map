{"version":3,"sources":["components/Header.js","components/Functions.js","components/Countries.js","components/Home.js","components/Country.js","components/Footer.js","components/App.js","serviceWorker.js","index.js"],"names":["Header","state","darkMode","darktStyle","handleSlider","_this","setState","console","log","this","react_default","a","createElement","Fragment","className","type","name","id","onChange","htmlFor","version","xmlns","width","height","viewBox","d","fill","Component","populationDotted","x","toString","replace","Countries","props","countries","countriesAll","map","country","index","react_router_dom","to","concat","alpha3Code","key","src","flag","alt","population","region","capital","Home","isLoaded","option","optionUpper","searchValue","filtered","filterActive","regionChoosed","scroll","scrollCheck","window","scrollY","handleSearchCountry","e","target","value","newCountriesList","filter","toLowerCase","includes","toLocaleLowerCase","handleFilterRegion","handleCloseGlobalFilterRegion","handleChangeRegion","currentTarget","getAttribute","valueUpper","slice","toUpperCase","length","_this2","addEventListener","fetch","then","response","ok","Error","status","json","data","catch","error","prevProps","prevState","_this3","removeEventListener","onClick","placeholder","components_Countries","scrollTo","Country","topLevelDomain","domain","languages","language","currencies","currency","borders","border","nativeName","subRegion","Footer","href","rel","ErrorPage","App","routeCountries","react_router","path","render","components_Country","countryAll","subregion","basename","process","components_Header","exact","components_Home","component","components_Footer","Boolean","location","hostname","match","ReactDOM","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ddd5e95c.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport '../style/Header.scss';\r\n\r\nclass Header extends Component {\r\n\r\n    state = {\r\n        darkMode: false,\r\n    }\r\n\r\n    darktStyle = 'body { background-color: hsl(207, 26%, 17%); } * {color:hsl(0, 0%, 100%);} .header, .footer {background-color: hsl(209, 23%, 22%)} .countryCard__description, .filter__chooseRegion, .filter__dropdown, .filter__searchInput, .scroll, .btn{background-color: hsl(209, 23%, 22%)} .filter__dropdown-item:hover{color:hsl(200, 15%, 8%); background-color: hsl(0,0%,100%);} .countryCard__description {border: 0} *:active, .scroll__arrowUp{color:hsl(0, 0%, 100%);} .scroll, .btn:hover{box-shadow: 0rem 0rem .5rem .2rem rgba(255, 255, 255, 0.4)} .btn:focus{box-shadow: inset 0rem 0rem .5rem .2rem rgba(255, 255, 255, 0.4)}';\r\n\r\n    handleSlider = () => {\r\n        this.setState({\r\n            darkMode: !this.state.darkMode,\r\n        })\r\n    }\r\n    render() {\r\n        console.log(this.state.darkMode);\r\n        return (\r\n            <>\r\n                {this.state.darkMode ? <style>{this.darktStyle}</style> : null}\r\n                <header className=\"header\">\r\n                    <h1 className=\"header__logo\">Where in the world?</h1>\r\n                    <div className=\"header__changeMode\">\r\n                        <input className=\"header__change-input\" type=\"checkbox\" name=\"mode\" id=\"mode\" onChange={this.handleSlider} />\r\n                        <label htmlFor=\"mode\" className='header__darkLightMode'>\r\n                            <svg className=\"header__icon-moon\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 20 20\">\r\n                                <title>moon</title>\r\n                                <path d=\"M13.719 1.8c0.686 0.385 1.332 0.867 1.916 1.449 3.42 3.422 3.42 8.966 0 12.386s-8.965 3.42-12.386 0c-0.583-0.584-1.065-1.231-1.449-1.916 3.335 1.867 7.633 1.387 10.469-1.449s3.318-7.134 1.45-10.47z\" fill={this.state.darkMode ? \"hsl(0, 0%, 100%)\" : \"hsl(209, 23%, 22%)\"}></path>\r\n                            </svg>\r\n                            <span className=\"header__mode-name\">{this.state.darkMode ? `Light Mode` : `Dark Mode`}</span>\r\n                        </label>\r\n                    </div>\r\n                </header>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Header;","const populationDotted = (x) => {\r\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n}\r\n\r\nexport {\r\n    populationDotted\r\n};","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport '../style/Countries.scss'\r\nimport { populationDotted } from \"./Functions\";\r\n\r\nconst Countries = (props) => {\r\n\r\n    const countries = props.countriesAll.map((country, index) => (\r\n\r\n        <NavLink to={`/${country.alpha3Code}`} className=\"navLink\" key={index}>\r\n            {/* country.cioc ? country.cioc : country.name - jesli ma cioc to uzywaj w celu dobrego linkowanie z borderami, ktore posluguja sie skrotami, a cioc to skrot */}\r\n            {/* badz sposob z alpha3Code zeby bylo zgodne z linkami z border, np border IRN to w alpha3Code Iranu tez IRN, ale juz cioc to IRI wiec linki sa sprzeczne, kilka jest takich wyjatkow, alpha3Code===border */}\r\n            <div className=\"countryCard\" key={index}>\r\n                <div className=\"countryCard__flag\">\r\n                    <img className={`countryCard__flagImg countryCard__flagImg--${country.alpha3Code}`} src={country.flag} alt={`${country.name} flag`} />\r\n                </div>\r\n                <div className=\"countryCard__description\">\r\n                    <h1 className=\"countryCard__primary\">{country.name}</h1>\r\n                    <ul className=\"countryCard__itemList\">\r\n                        <li className=\"countryCard__item\"><span>Population: </span>{populationDotted(country.population)}</li>\r\n                        <li className=\"countryCard__item\"><span>Region: </span>{country.region}</li>\r\n                        <li className=\"countryCard__item\"><span>Capital: </span>{country.capital}</li>\r\n                    </ul>\r\n                </div>\r\n\r\n            </div>\r\n        </NavLink>\r\n    ))\r\n    return (\r\n        <>\r\n            <div className='countries-container'>\r\n                {countries}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Countries;\r\n","import React, { Component } from 'react';\r\nimport { BrowserRouter as NavLink } from 'react-router-dom';\r\nimport Countries from '../components/Countries';\r\nimport '../style/Home.scss'\r\nclass Home extends Component {\r\n    state = {\r\n        countriesAll: [],\r\n        isLoaded: false,\r\n        option: \"all\",\r\n        optionUpper: \"\",\r\n        searchValue: \"\",\r\n        filtered: \"\",\r\n        filterActive: false,\r\n        regionChoosed: false,\r\n        scroll: false,\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        //Nasłuchiwanie scrolla, który umożliwi powrót na początek strony\r\n        window.addEventListener('scroll', this.scrollCheck, false);\r\n\r\n        fetch('https://restcountries.eu/rest/v2/all')\r\n            .then(response => {\r\n                console.log(response.ok);\r\n                if (response.ok) {\r\n                    console.log(response);\r\n                    return response;\r\n                }\r\n                else {\r\n                    throw Error(response.status)\r\n                }\r\n            })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                console.log(data);\r\n                this.setState({\r\n                    countriesAll: data,\r\n                    isLoaded: true,\r\n                })\r\n            })\r\n            .catch(error => console.log(error));\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevState.option !== this.state.option) {\r\n            //warunek jest po to, żeby fetch się zmieniał jeśli została wybrana opcja all to niech nie dodaje region, tylko opcje, żeby wyszło\r\n            //https://restcountries.eu/rest/v2/all, a jeśli została wybrana jakakolwiek inna opcja to niech doda region i wybrana opcje, żeby\r\n            //wyszło https://restcountries.eu/rest/v2/region/europe\r\n            fetch(`https://restcountries.eu/rest/v2/${this.state.option === \"all\" ? \"\" : \"region/\"}${this.state.option}`)\r\n                .then(response => {\r\n                    console.log(response.ok);\r\n                    if (response.ok) {\r\n                        console.log(response);\r\n                        return response;\r\n                    }\r\n                    else {\r\n                        throw Error(response.status)\r\n                    }\r\n                })\r\n                .then(response => response.json())\r\n                .then(data => {\r\n                    console.log(data);\r\n                    this.setState({\r\n                        filtered: \"\", //wyczysc tablice filtered, jesli jest ona pusta to wyswietla sie wszystkie opcje z danej kategorii (wiaze sie z inputem, czyli jesli wybiore jakas opcje to wyzeruj tablice filtered i wartosc z input)\r\n                        searchValue: \"\", //w celu wyczyszczenia inputa wyszukiwania, przy zmianie regionu\r\n                        countriesAll: data,\r\n                        isLoaded: true,\r\n                    })\r\n                })\r\n                .catch(error => console.log(error));\r\n        }\r\n\r\n    }\r\n\r\n    //Odmontowanie scrolla\r\n    componentWillUnmount() {\r\n        window.removeEventListener('scroll', this.scrollCheck, false);\r\n    }\r\n\r\n    scrollCheck = () => {\r\n        const beginScroll = window.scrollY < 100;\r\n        if (beginScroll === false) {\r\n            this.setState({\r\n                scroll: true,\r\n            })\r\n        } else {\r\n            this.setState({\r\n                scroll: false,\r\n            })\r\n        }\r\n    }\r\n\r\n    handleSearchCountry = (e) => {\r\n        this.setState({\r\n            searchValue: e.target.value,\r\n        })\r\n        let actualCountriesList = []; //aktualna lista krajów\r\n        let newCountriesList = []; //nowa lista, którą następnie będzie tablica filtered\r\n        if (e.target.value !== \"\") {//jeśli zostało coś wpisane\r\n            actualCountriesList = this.state.countriesAll; //aktualna lista krajów równa się tablicy krajów z api (mogą być z wszystkich krajów, bądź jeśli została wybrana jakaś opcja z danego regionu)\r\n            newCountriesList = actualCountriesList.filter(country => { //filtrowanie, jeśli jakiś kraj zawiera wpisaną frazę to go zwróć, toLowerCase() jest zastosowane, żeby porównywany kraj i wartość z inputa miały małe litery, żeby nie wystąpił konflikt\r\n                return country.name.toLowerCase().includes(e.target.value.toLocaleLowerCase());\r\n            })\r\n        } else {\r\n            newCountriesList = this.state.countriesAll; //jeśli nic nie zostało wpisane to nowa lista posiada wartość z api\r\n        }\r\n        this.setState({\r\n            filtered: newCountriesList, //tablica filtered ma teraz wartość newCountriesList, czyli nowej tablicy\r\n        });\r\n    }\r\n\r\n    //Toggle, jesli uzytkownik kliknie na Filter By Region to niech filter activ zmieni sie na true, jesli kliknie ponownie to na false\r\n    handleFilterRegion = () => {\r\n        this.setState({\r\n            filterActive: !this.state.filterActive,\r\n        })\r\n    }\r\n\r\n    //sluzy do zamkniecia dropdown listy zwiazanej z filtrowaniej jesli jest ona otwarta i uzytkownik kliknie w obszar diva homa\r\n    handleCloseGlobalFilterRegion = () => {\r\n        if (this.state.filterActive === true) {\r\n            this.setState({\r\n                filterActive: false,\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    //Pobranie wartosci kliknietej opcji w dropdown list, ustawienie stanu, jesli opcja zostanie wybrana to filterActive bedzie ustawiony na false w celu zamkniecia dropDown listy, regionChoosed zostaje ustawiony na true, w celu uzycia warunku, ktory zastapi Filter By Region wybrana opcja\r\n    handleChangeRegion = (e) => {\r\n        let value = e.currentTarget.getAttribute('value')\r\n        let valueUpper = value.slice(0, 1).toUpperCase() + value.slice(1, value.length);\r\n        this.setState({\r\n            option: value,\r\n            optionUpper: valueUpper,\r\n            regionChoosed: true,\r\n            filterActive: false,\r\n        })\r\n    }\r\n\r\n    render() {\r\n        console.log(this.state.filterActive)\r\n        return (\r\n            <div className='home' onClick={this.handleCloseGlobalFilterRegion}>\r\n                <div className=\"filter\">\r\n                    <div className=\"filter__searchPanel\">\r\n                        <svg className=\"filter__icon\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\r\n                            <title>magnifying-glass</title>\r\n                            <path d=\"M17.545 15.467l-3.779-3.779c0.57-0.935 0.898-2.035 0.898-3.21 0-3.417-2.961-6.377-6.378-6.377s-6.186 2.769-6.186 6.186c0 3.416 2.961 6.377 6.377 6.377 1.137 0 2.2-0.309 3.115-0.844l3.799 3.801c0.372 0.371 0.975 0.371 1.346 0l0.943-0.943c0.371-0.371 0.236-0.84-0.135-1.211zM4.004 8.287c0-2.366 1.917-4.283 4.282-4.283s4.474 2.107 4.474 4.474c0 2.365-1.918 4.283-4.283 4.283s-4.473-2.109-4.473-4.474z\"></path>\r\n                        </svg>\r\n                        <input className=\"filter__searchInput\" type=\"text\" placeholder=\"Search for a country...\" value={this.state.searchValue} onChange={this.handleSearchCountry} />\r\n                    </div>\r\n\r\n                    <div className=\"filter__selectPanel\">\r\n                        <NavLink to=\"./\">\r\n                            <span onClick={this.handleFilterRegion} className={this.state.filterActive ? \"filter__chooseRegion filter__chooseRegion--caretUp\" : \"filter__chooseRegion filter__chooseRegion--caretDown\"}>{this.state.regionChoosed ? this.state.optionUpper : \"Filter by Region\"}</span>\r\n                            <ul className={this.state.filterActive ? \"filter__dropdown visible\" : \"filter__dropdown\"}>\r\n                                <li className=\"filter__dropdown-item filter__dropdown-item--all\" value=\"all\"\r\n                                    onClick={this.handleChangeRegion}>All</li>\r\n                                <li className=\"filter__dropdown-item filter__dropdown-item--africa\" value=\"africa\"\r\n                                    onClick={this.handleChangeRegion}>Africa</li>\r\n                                <li className=\"filter__dropdown-item filter__dropdown-item--americas\" value=\"americas\"\r\n                                    onClick={this.handleChangeRegion}>Americas</li>\r\n                                <li className=\"filter__dropdown-item filter__dropdown-item--asia\" value=\"asia\"\r\n                                    onClick={this.handleChangeRegion}>Asia</li>\r\n                                <li className=\"filter__dropdown-item filter__dropdown-item--europe\" value=\"europe\"\r\n                                    onClick={this.handleChangeRegion}>Europe</li>\r\n                                <li className=\"filter__dropdown-item filter__dropdown-item--oceania\" value=\"oceania\"\r\n                                    onClick={this.handleChangeRegion}>Oceania</li>\r\n                            </ul>\r\n                        </NavLink>\r\n                    </div>\r\n                </div>\r\n                {/* Warunek 1 jeśli dane jeszcze się nie załadowały, to niech wyświetli się napis Loading */}\r\n                {/* Warunek 2 jeśli tablica pofiltrowana jest pusta (bo nic nie ma w inpucie, bądź została wybrana jakaś opcja z droplisty) to wyświetl tablicę countries (czyli bezpośrednio z api), jeśli filtered nie jest puste to wyświetl kraje pofiltrowane */}\r\n                {this.state.isLoaded ? <Countries countriesAll={this.state.filtered === \"\" ? this.state.countriesAll : this.state.filtered} /> : <div className='loading'><span className='loader'></span></div>}\r\n                <div className={this.state.scroll ? 'scroll' : null} onClick={() => { window.scrollTo(0, 0) }}>\r\n                    <i className={this.state.scroll ? \"fas fa-arrow-up scroll__arrowUp\" : null}></i>\r\n                </div>\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport \"../style/Country.scss\";\r\nimport { populationDotted } from \"./Functions\";\r\n\r\nconst Country = (props) => {\r\n\r\n    const topLevelDomain = props.topLevelDomain.map((domain, index) => (\r\n        <li className=\"info-item\" key={index}>{domain}</li>\r\n    ))\r\n    const languages = props.languages.map((language, index) => (\r\n        <li className=\"info-item\" key={index}>{language.name}</li>\r\n    ))\r\n\r\n    const currencies = props.currencies.map((currency, index) => (\r\n        <li className=\"info-item\" key={index}>{currency.name}</li>\r\n    ))\r\n\r\n    const borders = props.borders.map((border, index) => (\r\n        <li className=\"borders-item\" key={index}>\r\n            <NavLink to={border} className=\"navLink\">\r\n                <button className=\"btn btn--borders\">{border}</button>\r\n            </NavLink>\r\n        </li>\r\n    ))\r\n\r\n    return (\r\n        <div className=\"country-container\">\r\n            <div className=\"country-container__back\">\r\n                <NavLink to=\"/\" className=\"navLink\">\r\n                    <button className=\"btn country-container__button-back\">Back</button>\r\n                </NavLink>\r\n\r\n            </div>\r\n            <div className=\"country-details\">\r\n                <div className=\"country-details__flag\">\r\n                    <img className={`country-details__flagImg country-details__flagImg--${props.alpha3Code}`} src={props.flag} alt={`${props.name} flag`} />\r\n                </div>\r\n                <div className=\"country-details__info\">\r\n                    <h1 className=\"country-details__headingPrimary\">{props.name}</h1>\r\n                    <ul className=\"info-list info-list--partOne\">\r\n                        <li className=\"info-item info-item--nativeName\">\r\n                            <h4 className=\"country-details__headingQuaternary\">Native Name:</h4>{props.nativeName}\r\n                        </li>\r\n                        <li className=\"info-item\">\r\n                            <h4 className=\"country-details__headingQuaternary\">Population:</h4>{populationDotted(props.population)}\r\n                        </li>\r\n                        <li className=\"info-item\">\r\n                            <h4 className=\"country-details__headingQuaternary\">Region:</h4>{props.region}\r\n                        </li>\r\n                        <li className=\"info-item\">\r\n                            <h4 className=\"country-details__headingQuaternary\">Sub Region:</h4>{props.subRegion}\r\n                        </li>\r\n                        <li className=\"info-item\">\r\n                            <h4 className=\"country-details__headingQuaternary\">Capital:</h4>{props.capital}\r\n                        </li>\r\n                    </ul>\r\n                    <ul className=\"info-list info-list--partTwo\">\r\n                        <ul className=\"info-list__domain\">\r\n                            <h4 className=\"country-details__headingQuaternary\">Top Level Domain:</h4>{topLevelDomain}\r\n                        </ul>\r\n                        <ul className=\"info-list__curriences\">\r\n                            <h4 className=\"country-details__headingQuaternary\">Curriences: </h4>{currencies}\r\n                        </ul>\r\n                        <ul className=\"info-list__languages\">\r\n                            <h4 className=\"country-details__headingQuaternary\">Languages:</h4>{languages}\r\n                        </ul>\r\n                    </ul>\r\n                    <ul className=\"info-list info-list--partThree\">\r\n                        <ul className=\"info-list__borders\">\r\n                            <h4>Border Countries:</h4>\r\n                            {borders}\r\n                        </ul>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Country;","import React from 'react';\r\nimport \"../style/Footer.scss\";\r\nconst Footer = () => {\r\n    return (\r\n        <footer className=\"footer\">\r\n            Challenge by <a href=\"https://www.frontendmentor.io?ref=challenge\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"footer__link\">Frontend Mentor</a>.\r\n        Coded by <a href=\"https://github.com/PioKl\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"footer__link\">Piotr Kłosowski</a>.\r\n        </footer>\r\n    );\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Header from '../components/Header';\nimport Home from '../components/Home';\nimport Country from '../components/Country';\nimport Footer from '../components/Footer';\nimport '../style/App.scss';\n\nconst ErrorPage = () => <h1>Strona nie istnieje</h1>\nclass App extends Component {\n\n  /* https://restcountries.eu/ */\n  /* ALL  https://restcountries.eu/rest/v2/all */\n  /* Name - Search by country name. It can be the native name or partial name\n  https://restcountries.eu/rest/v2/name/{name}, https://restcountries.eu/rest/v2/name/united \n  */\n  /* Full Name - Search by country full name\n  https://restcountries.eu/rest/v2/name/{name}?fullText=true\n  https://restcountries.eu/rest/v2/name/aruba?fullText=true\n  */\n  /* Region - Search by region: Africa, Americas, Asia, Europe, Oceania\n  https://restcountries.eu/rest/v2/region/{region}\n  https://restcountries.eu/rest/v2/region/europe\n  */\n\n  state = {\n    countriesAll: [],\n  }\n\n\n  componentDidMount() {\n    fetch('https://restcountries.eu/rest/v2/all')\n      .then(response => {\n        console.log(response.ok);\n        if (response.ok) {\n          console.log(response);\n          return response;\n        }\n        else {\n          throw Error(response.status)\n        }\n      })\n      .then(response => response.json())\n      .then(data => {\n        this.setState({\n          countriesAll: data,\n        })\n      })\n      .catch(error => console.log(error));\n  }\n\n\n\n  render() {\n    const routeCountries = this.state.countriesAll.map((country, index) => (\n      <Route path={`/${country.alpha3Code}`} key={index}\n        render={() => <main className=\"main main--country\"><Country countryAll={this.state.countriesAll} flag={country.flag} name={country.name} nativeName={country.nativeName} population={country.population}\n          region={country.region} subRegion={country.subregion} capital={country.capital} topLevelDomain={country.topLevelDomain} currencies={country.currencies} languages={country.languages} borders={country.borders} alpha3Code={country.alpha3Code}\n        /></main>} //zeby country wyswietlalo odpowiednie panstwo zwiazane z linkiem\n      />\n    ))\n    return (\n      <Router basename={process.env.PUBLIC_URL}>\n        <>\n          <div className=\"App\">\n            <div className=\"container\">\n              <Header />\n\n              <Switch>\n                <Route exact path=\"/\" render={() => <main className=\"main main--home\"><Home /> </main>}\n                />\n                {routeCountries}\n                <Route component={ErrorPage} />\n              </Switch>\n              <Footer />\n            </div>\n          </div>\n        </>\n      </Router >\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}